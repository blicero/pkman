# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2023-04-28 17:44:27 krylon>
#
#+TAGS: optimize(o) refactor(r) bug(b) feature(f) architecture(a)
#+TAGS: web(w) database(d) javascript(j)
#+TODO: TODO(t) IMPLEMENT(i) TEST(e) RESEARCH(r) | DONE(d)
#+TODO: MEDITATE(m) PLANNING(p) REFINE(n) | FAILED(f) CANCELLED(c) SUSPENDED(s)
#+TODO: EXPERIMENT(x) |
#+PRIORITIES: A G D

* pkman
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 20
   #+CAPTION: Clock summary at [2023-04-28 Fr 11:46]
   | Headline                        | Time      |         |       |       |
   |---------------------------------+-----------+---------+-------+-------|
   | *Total time*                    | *1d 8:48* |         |       |       |
   |---------------------------------+-----------+---------+-------+-------|
   | pkman                           | 1d 8:48   |         |       |       |
   | \_  Components [0/0]            |           | 1d 8:48 |       |       |
   | \_    Database [0/0]            |           |         | 10:58 |       |
   | \_    Package managers [2/2]    |           |         | 21:50 |       |
   | \_      Detect operating system |           |         |       | 14:38 |
   | \_      Interface               |           |         |       |  1:43 |
   | \_      APT                     |           |         |       |  3:54 |
   | \_      zypper                  |           |         |       |  1:35 |
   #+END:
** Diary
** Components [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Database [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-04-24 Mo 18:52]--[2023-04-24 Mo 22:25] =>  3:33
    CLOCK: [2023-04-24 Mo 10:35]--[2023-04-24 Mo 11:15] =>  0:40
    CLOCK: [2023-04-22 Sa 21:15]--[2023-04-23 So 00:18] =>  3:03
    CLOCK: [2023-04-22 Sa 17:55]--[2023-04-22 Sa 20:52] =>  2:57
    CLOCK: [2023-04-22 Sa 16:28]--[2023-04-22 Sa 17:13] =>  0:45
    :END:
    I want to keep track of some things, most importantly /when/ updates are
    installed. Also, when packages are installed, deleted, etc. Eventually,
    I'd like to provide a nice interface to do something with that data.
    I'll probably end up using SQLite again. But that is not final.
**** What data to store
     [2023-04-21 Fr 23:45]
     I am starting to think about what data I want to store. I definitely want
     to keep track of when the packages database has been updated and when
     updates were installed.
     |-------------------+---------+---------|
     | Data              | Type    | Remarks |
     |-------------------+---------+---------|
     | Time of refresh   | Integer |         |
     | Time of update    | Integer |         |
     | Status of refresh | Integer |         |
     | Status of update  | Integer |         |
     |-------------------+---------+---------|
     In fact, now that I think of it, maybe I want to store every destructive
     operation, with timestamp and result, possibly the exact command line
     that was executed.
     
*** CLI [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    Among the various package managers I am familiar with, I most like the
    interfaces offered by zypper on openSuse and pkg on FreeBSD.
*** Operations [0/6]
    It would probably best to define which operations I want to expose.
    I will probably want to add more as I go along.
    - [ ] Update package repos
    - [ ] Search packages
    - [ ] Install packages
    - [ ] Remove packages
    - [ ] Install updates
    - [ ] List installed packages
    - [ ] Clean up
*** Package managers [2/2]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
**** DONE Detect operating system
     CLOSED: [2023-04-21 Fr 22:03]
     :LOGBOOK:
     CLOCK: [2023-04-21 Fr 21:40]--[2023-04-21 Fr 22:03] =>  0:23
     CLOCK: [2023-04-21 Fr 18:17]--[2023-04-21 Fr 19:58] =>  1:41
     CLOCK: [2023-04-19 Mi 15:56]--[2023-04-19 Mi 23:03] =>  7:07
     CLOCK: [2023-04-18 Di 20:32]--[2023-04-18 Di 23:59] =>  3:27
     CLOCK: [2023-04-18 Di 14:28]--[2023-04-18 Di 14:56] =>  0:28
     CLOCK: [2023-04-17 Mo 21:10]--[2023-04-17 Mo 22:28] =>  1:18
     CLOCK: [2023-04-17 Mo 10:36]--[2023-04-17 Mo 10:50] =>  0:14
     :END:
**** DONE Interface
     CLOSED: [2023-04-21 Fr 23:51]
     :LOGBOOK:
     CLOCK: [2023-04-21 Fr 22:08]--[2023-04-21 Fr 23:51] =>  1:43
     :END:
     My idea is simple enough - define a Go interface that offers all of the
     operations I want to perform, then write implementations of that for each
     package manager I want to support. 
**** apt
     :LOGBOOK:
     CLOCK: [2023-04-26 Mi 16:41]--[2023-04-26 Mi 20:35] =>  3:54
     :END:
**** dnf
**** zypper
     :LOGBOOK:
     CLOCK: [2023-04-28 Fr 10:11]--[2023-04-28 Fr 11:46] =>  1:35
     :END:
**** pacman
**** pkg FreeBSD
**** pkg_* OpenBSD
** Bugs
